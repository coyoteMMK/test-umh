---
import Layout from "../layouts/Layout.astro";

const modules = import.meta.glob("../data/tests/*.json", {
  eager: true,
  query: "?json",
});

const hierarchy = {} as Record<
  string,
  Record<string, Record<string, { slug: string; title: string }[]>>
>;

for (const [path, data] of Object.entries(modules)) {
  const slug = (path.split("/").pop() ?? "").replace(".json", "");
  const {
    title,
    career = "Sin carrera",
    year = "Sin a침o",
    subject = "Sin asignatura",
  } = data as any;

  if (!hierarchy[career]) hierarchy[career] = {};
  if (!hierarchy[career][year]) hierarchy[career][year] = {};
  if (!hierarchy[career][year][subject]) hierarchy[career][year][subject] = [];

  hierarchy[career][year][subject].push({ slug, title });
}

const orderedYears = [
  "Primer a침o",
  "Segundo a침o",
  "Tercer a침o",
  "Cuarto a침o",
  "Quinto a침o",
  "Sin a침o",
];
---

<Layout
title="Repositorio de test"
	description="Recopilaci칩n de test para estudiar y aprobar"
>
  <h1 class="text-4xl sm:text-5xl font-bold text-center py-5 sm:py-10 ">
    游빍 Repositorio de Tests UMH
  </h1>

  <div class="container mx-auto max-w-5xl p-4 sm:p-6 lg:p-8 ">
    {
      Object.entries(hierarchy).map(([career, years]) => (
        <section class="mb-10">
          <h2 class="text-3xl sm:text-4xl font-bold mb-6 border-b-4 border-black pb-2">{career}</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            {orderedYears
              .filter((year) => year in years)
              .map((year, yearIndex) => {
                const id = `${career.replace(/\s+/g, "_")}_year_${yearIndex}`;
                const toggleCode = `
                  const panel = document.getElementById('${id}');
                  if (panel.classList.contains('max-h-0')) {
                    panel.classList.remove('max-h-0');
                    panel.classList.add('max-h-96');
                  } else {
                    panel.classList.remove('max-h-96');
                    panel.classList.add('max-h-0');
                  }
                `;
                return (
                  <div class="w-full">
                    <button
                      class="w-full flex items-center justify-between border-4 border-black rounded-t-lg px-4 py-3 bg-white hover:bg-gray-300 shadow transition"
                      onclick={toggleCode}
                    >
                      <span class="text-lg font-semibold">{year}</span>
                      <svg
                        class="w-5 h-5 text-black transition-transform duration-300"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          d="M19 9l-7 7-7-7"
                        />
                      </svg>
                    </button>
                    <div
                      id={id}
                      class="transition-all duration-500 ease-in-out overflow-hidden max-h-0"
                    >
                      <div class="bg-white border-4 border-t-0 border-black rounded-b-lg px-5 py-4 shadow-inner">
                        <ul class="grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-2 list-disc pl-6">
                          {Object.entries(years[year]).map(([subject]) => (
                            <li>
                              <a
                                class="text-blue-700 hover:underline"
                                href={`/test-umh/asignaturas/${encodeURIComponent(subject)}/`}
                              >
                                {subject}
                              </a>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                );
              })}
          </div>
        </section>
      ))
    }
  </div>
</Layout>
