---
import Layout from "../layouts/Layout.astro";

// Cargar todos los tests JSON
const modules = import.meta.glob("../data/tests/*.json", {
  eager: true,
  query: "?json",
});

// Jerarquía: carrera → año → asignatura → tests[]
const hierarchy = {} as Record<
  string,
  Record<string, Record<string, { slug: string; title: string }[]>>
>;

for (const [path, data] of Object.entries(modules)) {
  const slug = (path.split("/").pop() ?? "").replace(".json", "");
  const {
    title,
    career = "Sin carrera",
    year = "Sin año",
    subject = "Sin asignatura",
  } = data as any;

  if (!hierarchy[career]) hierarchy[career] = {};
  if (!hierarchy[career][year]) hierarchy[career][year] = {};
  if (!hierarchy[career][year][subject]) hierarchy[career][year][subject] = [];

  hierarchy[career][year][subject].push({ slug, title });
}

// Orden personalizado de los años
const orderedYears = [
  "Primer año",
  "Segundo año",
  "Tercer año",
  "Cuarto año",
  "Quinto año",
  "Sin año",
];
---

<Layout>
  <h1 class="text-3xl font-bold text-center py-10">Repositorio de Tests UMH</h1>

  <div class="container mx-auto max-w-5xl p-4 sm:p-6 lg:p-8">
    {
      Object.entries(hierarchy).map(([career, years]) => (
        <section class="mb-8">
          <h2 class="text-5xl font-semibold mb-4 border-b pb-2">{career}</h2>
          <div class="mx-10 grid grid-cols-1 sm:grid-cols-2 gap-4">
            {orderedYears
              .filter((year) => year in years)
              .map((year, yearIndex) => {
                const id = `${career.replace(/\s+/g, "_")}_year_${yearIndex}`;
                const toggleCode = `
        const panel = document.getElementById('${id}');
        if (panel.classList.contains('max-h-0')) {
          panel.classList.remove('max-h-0');
          panel.classList.add('max-h-96');
        } else {
          panel.classList.remove('max-h-96');
          panel.classList.add('max-h-0');
        }
      `;
                return (
                  <div class="w-full">
                    <button
                      class="w-full flex items-center justify-between border border-gray-300 rounded-t-lg px-4 py-2  bg-white hover:bg-gray-50 transition"
                      onclick={toggleCode}
                    >
                      <span class="text-blue-700 text-lg font-medium">
                        {year}
                      </span>
                      <svg
                        class="w-4 h-4 text-gray-500 transition-transform duration-300"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          d="M19 9l-7 7-7-7"
                        />
                      </svg>
                    </button>
                    <div
                      id={id}
                      class="transition-all duration-500 ease-in-out overflow-hidden max-h-0 "
                    >
                       <div class="bg-gray-300 rounded-b-lg shadow-inner px-4 py-4">
                      <ul class="list-disc pl-6">
                        {Object.entries(years[year]).map(([subject]) => (
                          <li>
                            <a
                              class="text-blue-600 hover:underline"
                              href={`/test-umh/asignaturas/${encodeURIComponent(subject)}/`}
                            >
                              {subject}
                            </a>
                          </li>
                        ))}
                      </ul>
                      </div>
                    </div>
                  </div>
                );
              })}
          </div>
        </section>
      ))
    }
  </div>
</Layout>