---
import ScoreCounter from './ScoreCounter.astro';

interface Question {
  q: string;
  a: string[];
  answer: number; // 1-based in original data
}

const originalQuestions = Array.isArray(Astro.props.questions) ? Astro.props.questions : [];
const totalQuestions = originalQuestions.length;
---

<!--
  ScoreCounter is rendered with initial values.
  The client-side script below will take over updating its content.
-->
<ScoreCounter correctAnswers={0} wrongAnswers={0} totalQuestions={totalQuestions} isTestFinished={false} />

<!-- Contenedor de todas las preguntas -->
<div id="test-root" class="flex flex-col items-center mt-8 px-4 md:px-0"></div>

<!-- Datos de las preguntas (oculto) -->
<div id="questions-data" data-questions={JSON.stringify(originalQuestions).replace(/"/g, '&quot;')} style="display:none"></div>

<script type="module">
  function shuffle(array) {
    let arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  const questionsDataElement = document.getElementById('questions-data');
  const questions = questionsDataElement ? JSON.parse(questionsDataElement.dataset.questions.replace(/&quot;/g, '"')) : [];
  const totalQuestions = questions.length;

  const shuffledQuestions = shuffle(questions).map(q => {
    const shuffledAnswers = shuffle(q.a);
    const correctText = q.a[q.answer - 1];
    const newCorrectIndex = shuffledAnswers.indexOf(correctText);
    return {
      q: q.q,
      a: shuffledAnswers,
      answer: newCorrectIndex,
    };
  });

  const emojis = ["ðŸ˜Ž", "ðŸ‘¾", "ðŸ‘½", "ðŸ‘¹"];
  const testRoot = document.getElementById("test-root");
  if (testRoot) {
    testRoot.innerHTML = shuffledQuestions.map((item, i) => `
      <section
        class="w-full max-w-2xl mb-6 px-4 py-3 bg-white shadow-xl border-4 border-slate-700 rounded-lg text-sm sm:text-base"
        data-correct="${item.answer}"
        data-question-id="${i}"
      >
        <h2 class="text-lg sm:text-2xl font-bold text-center mb-3 text-slate-800">${item.q}</h2>
        <ul class="flex flex-col gap-4 list-none p-0">
          ${item.a.map((ans, j) => `
            <li
              class="option mx-4 p-3 sm:p-4 rounded-md bg-slate-100 hover:bg-slate-300 cursor-pointer transition-colors flex items-start gap-2 text-slate-700"
              data-index="${j}"
            >
              <span>${emojis[j % emojis.length]}</span>
              <span>${ans}</span>
            </li>
          `).join("")}
        </ul>
      </section>
    `).join("");
  }

  if (!document.getElementById('dynamic-quiz-styles')) {
    const style = document.createElement('style');
    style.id = 'dynamic-quiz-styles';
    // Using Tailwind's theme colors for consistency if possible, otherwise fallback
    style.textContent = `
      .correct {
        background-color: #4ade80 !important; /* Tailwind green-400 */
        color: #166534 !important; /* Tailwind green-800 */
      }
      .wrong {
        background-color: #f87171 !important; /* Tailwind red-400 */
        color: #991b1b !important; /* Tailwind red-800 */
      }
    `;
    document.head.appendChild(style);
  }

  let correctCount = 0;
  let wrongCount = 0;
  let questionsAnswered = 0;

  // Get references to the specific number spans in ScoreCounter
  const scoreCorrectNumEl = document.querySelector("#score-correct > span:last-child");
  const scoreWrongNumEl = document.querySelector("#score-wrong > span:last-child");
  const scoreTotalNumEl = document.querySelector("#score-total > span:last-child"); // Already set by Astro, but good to have if needed
  const scoreFinalPercentageEl = document.getElementById("score-final-percentage");

  function updateScoreDisplay() {
    if (scoreCorrectNumEl) scoreCorrectNumEl.textContent = String(correctCount);
    if (scoreWrongNumEl) scoreWrongNumEl.textContent = String(wrongCount);
    // scoreTotalNumEl typically doesn't change, but if it could:
    // if (scoreTotalNumEl) scoreTotalNumEl.textContent = String(totalQuestions);


    if (questionsAnswered === totalQuestions && totalQuestions > 0) {
      const percentage = Math.round((correctCount / totalQuestions) * 100);
      if (scoreFinalPercentageEl) {
        scoreFinalPercentageEl.textContent = `Resultado: ${percentage}%`;
        scoreFinalPercentageEl.classList.remove('hidden');
      }
      // Optionally hide individual counts or show a summary message
      // For now, we just add the percentage.
    } else {
      if (scoreFinalPercentageEl) {
         scoreFinalPercentageEl.classList.add('hidden');
         scoreFinalPercentageEl.textContent = ''; // Clear it
      }
    }
  }

  // Initial display update for correct, wrong, total based on current counts (0,0,total)
  updateScoreDisplay();

  document.querySelectorAll("#test-root > section").forEach((section) => {
    const correctIdx = Number(section.dataset.correct);
    let answeredThisSection = false;

    section.querySelectorAll("li").forEach((li) => {
      li.addEventListener("click", () => {
        if (answeredThisSection) return;
        answeredThisSection = true;
        questionsAnswered++;

        const choice = Number(li.dataset.index);
        if (choice === correctIdx) {
          li.classList.add("correct");
          correctCount++;
        } else {
          li.classList.add("wrong");
          wrongCount++; // Increment wrong count
          const correctLi = section.querySelector(
            `li[data-index="${correctIdx}"]`
          );
          correctLi?.classList.add("correct");
        }
        updateScoreDisplay();
      });
    });
  });
</script>
