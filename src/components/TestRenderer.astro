---
interface Question {
  q: string;
  a: string[];
  answer: number; // 1-based
}

const originalQuestions = Astro.props.questions;
---
<!-- Contador de aciertos y errores -->
<div
  id="counter"
  class="fixed top-10 left-4 z-50
    text-sm sm:text-base
    bg-white/80 shadow-md px-2 py-1 rounded-lg font-sans
    flex flex-col items-center gap-1"
>
  <div class="text-green-700">
    ‚úîÔ∏è <span id="correct-count" class="hidden sm:inline">Correctas: </span><span
      id="correct-num">0</span
    >
  </div>
  <div class="text-red-700">
    ‚ùå <span id="wrong-count" class="hidden sm:inline">Incorrectas: </span><span
      id="wrong-num">0</span
    >
  </div>
</div>

<!-- Contenedor de todas las preguntas -->
<div id="test-root" class="flex flex-col items-center mt-2 px-4 md:px-0"></div>

<!-- Pasar preguntas al cliente -->
<script id="questions-data" type="application/json">
  {JSON.stringify(originalQuestions)}
</script>

<script type="module">
  // Funci√≥n para mezclar arrays
  function shuffle(array) {
    let arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  // Obtener preguntas del script JSON
  const questions = JSON.parse(document.getElementById('questions-data').textContent);

  // Mezclar preguntas y respuestas en el cliente
  const shuffledQuestions = shuffle(questions).map(q => {
    const shuffledAnswers = shuffle(q.a);
    const correctText = q.a[q.answer - 1];
    const newCorrectIndex = shuffledAnswers.indexOf(correctText);
    return {
      q: q.q,
      a: shuffledAnswers,
      answer: newCorrectIndex, // 0-based
    };
  });

  // Renderizar preguntas
  const emojis = ["üòé", "üëæ", "üëΩ", "üëπ"];
  const testRoot = document.getElementById("test-root");
  testRoot.innerHTML = shuffledQuestions.map((item, i) => `
    <section
      class="w-full max-w-2xl mb-6 px-4 py-3 bg-white shadow-xl border-4 border-black rounded-lg text-sm sm:text-base"
      data-correct="${item.answer}"
    >
      <h2 class="text-lg sm:text-2xl font-bold text-center mb-3">${item.q}</h2>
      <ul class="flex flex-col gap-4 list-none p-0">
        ${item.a.map((ans, j) => `
          <li
            class="option mx-4 p-3 sm:p-4 rounded-md bg-gray-100 hover:bg-gray-300 cursor-pointer transition-colors flex items-start gap-2"
            data-index="${j}"
          >
            <span>${emojis[j % emojis.length]}</span>
            <span>${ans}</span>
          </li>
        `).join("")}
      </ul>
    </section>
  `).join("");

  // Inyectar estilos para .correct y .wrong si no existen
  if (!document.getElementById('dynamic-quiz-styles')) {
    const style = document.createElement('style');
    style.id = 'dynamic-quiz-styles';
    style.textContent = `
      .correct {
        background-color: #3eff4e !important;
      }
      .wrong {
        background-color: #fd5b5b !important;
      }
    `;
    document.head.appendChild(style);
  }

  // L√≥gica de interacci√≥n
  let correctCount = 0;
  let wrongCount = 0;
  const correctEl = document.querySelector("#correct-num");
  const wrongEl = document.querySelector("#wrong-num");

  document.querySelectorAll("#test-root > section").forEach((section) => {
    const correctIdx = Number(section.dataset.correct);
    let answered = false;

    section.querySelectorAll("li").forEach((li) => {
      li.addEventListener("click", () => {
        if (answered) return;
        answered = true;
        const choice = Number(li.dataset.index);
        if (choice === correctIdx) {
          li.classList.add("correct");
          correctCount++;
          correctEl.textContent = String(correctCount);
        } else {
          li.classList.add("wrong");
          wrongCount++;
          wrongEl.textContent = String(wrongCount);
          const correctLi = section.querySelector(
            `li[data-index="${correctIdx}"]`
          );
          correctLi?.classList.add("correct");
        }
      });
    });
  });
</script>
